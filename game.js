// config.js

const CONFIG = {
    TILE_SIZE: 50,
    ROWS: 8,
    COLS: 12,
    MONSTER_COUNT: 5,

    OBJECT_CONFIG: {
        monster: {
            type: 'monster',
            color: 'purple',
            resourceGain: { '‚ô†': 2, '‚ô£': 1 }
        },
        chest: {
            type: 'chest',
            color: 'gold',
            resourceGain: { '‚ô¶': 3 }
        }
    },
    SPELLS: [
        {
            name: '–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä',
            cost: { '‚ô†': 2, '‚ô¶': 1 },
            damage: { '‚ô•': 2 }
        },
        {
            name: '–õ—ë–¥',
            cost: { '‚ô£': 1 },
            damage: { '‚ô†': 1 }
        },
        {
            name: '–ò—Å—Ü–µ–ª–µ–Ω–∏–µ',
            cost: { '‚ô£': 2 },
            effect: () => alert('üíö –ò—Å—Ü–µ–ª–µ–Ω–∏–µ!')
        },
        {
            name: '–ü—Ä–∏–∑—ã–≤ —Å—É–Ω–¥—É–∫–∞',
            cost: { '‚ô†': 1, '‚ô£': 1 },
            effect: () => {
                const x = Math.floor(Math.random() * COLS);
                const y = Math.floor(Math.random() * ROWS);
                if (terrain[y][x] !== 1) {
                    objects.push(new Chest(x, y));
                }
            }
        }
    ],
    
    SURFACES: {
        field: {
            id: 0,
            name: '–ü–æ–ª–µ',
            color: '#90EE90',
            probability: 0.5,
            actions: [
                {
                    label: '–°–æ–±—Ä–∞—Ç—å —É—Ä–æ–∂–∞–π',
                    cost: {},
                    gain: { '‚ô†': 1 }
                },
                {
                    label: '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–º–±–∞—Ä',
                    cost: { '‚ô†': 2 },
                    gain: { '‚ô¶': 1 }
                }
            ]
        },
        rock: {
            id: 1,
            name: '–°–∫–∞–ª—ã',
            color: '#A9A9A9',
            probability: 0.1,
            actions: []
        },
        water: {
            id: 2,
            name: '–†–µ–∫–∞',
            color: '#87CEEB',
            probability: 0.4,
            actions: [
                {
                    label: '–ü–æ—Ä—ã–±–∞—á–∏—Ç—å',
                    cost: {},
                    gain: { '‚ô£': 1 }
                },
                {
                    label: '–ù–∞–±—Ä–∞—Ç—å –≤–æ–¥—É',
                    cost: { '‚ô£': 1 },
                    gain: { '‚ô¶': 2 }
                }
            ]
        },
        forest: {
            id: 3,
            name: '–õ–µ—Å',
            color: '#006400',
            probability: 0.4,
            actions: [
                {
                    label: '–†—É–±–∏—Ç—å –ª–µ—Å',
                    cost: {},
                    gain: { '‚ô£': 1 }
                }
            ]
        }
    }
};

const SurfaceById = Object.values(CONFIG.SURFACES).reduce((map, surf) => {
    map[surf.id] = surf;
    return map;
}, {});

const { TILE_SIZE, ROWS, COLS, MONSTER_COUNT } = CONFIG;

// game.js

const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');

const SEED_X = Math.random() * 1000;
const SEED_Y = Math.random() * 1000;

// –ò–≥—Ä–æ–∫
let player = { x: 0, y: 0 };

// –†–µ—Å—É—Ä—Å—ã
let resources = {
    '‚ô†': 3,
    '‚ô¶': 5,
    '‚ô£': 2
};

// –ö–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤

class GameObject {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.type = type;
        this.config = CONFIG.OBJECT_CONFIG[type];
    }

    interact() {
        const gain = this.config.resourceGain || {};
        for (let res in gain) {
            resources[res] = (resources[res] || 0) + gain[res];
        }
    }

    draw(ctx) {
        const cx = this.x * TILE_SIZE + TILE_SIZE / 2;
        const cy = this.y * TILE_SIZE + TILE_SIZE / 2;
        ctx.beginPath();
        ctx.arc(cx, cy, TILE_SIZE / 4, 0, 2 * Math.PI);
        ctx.fillStyle = this.config.color;
        ctx.fill();
        ctx.stroke();
    }
}

class Monster extends GameObject {
    constructor(x, y) {
        super(x, y, 'monster');
    }
}

class Chest extends GameObject {
    constructor(x, y) {
        super(x, y, 'chest');
    }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã

function perlin2(x, y) {
    return Math.sin((x + SEED_X) * 3.14 + (y + SEED_Y) * 1.618) * Math.cos((y + SEED_Y) * 3.14 + (x + SEED_X) * 1.618);
}

function generateTerrain(rows, cols, scale = Math.random() * .3 + .1) {
    const surfaces = Object.values(CONFIG.SURFACES).sort((a, b) => a.id - b.id);
    const surfaceCount = surfaces.length;

    let map = [];

    for (let y = 0; y < rows; y++) {
        let row = [];
        for (let x = 0; x < cols; x++) {
            let v = (perlin2(x * scale, y * scale) + 1) / 2;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ –ø–µ—Ä–ª–∏–Ω—É
            let index = Math.floor(v * surfaceCount);
            if (index >= surfaceCount) index = surfaceCount - 1;

            let preferred = surfaces[index];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
            if (Math.random() <= (preferred.probability ?? 1)) {
                row.push(preferred.id);
            } else {
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â—É—é —Å–≤–æ–µ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
                let fallback = surfaces.find(surf =>
                    Math.random() <= (surf.probability ?? 0)
                );

                row.push((fallback || preferred).id);
            }
        }
        map.push(row);
    }

    return map;
}



let terrain = generateTerrain(ROWS, COLS);

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤

let objects = [];

function generateObjects() {
    objects = [];

    // –ú–æ–Ω—Å—Ç—Ä—ã
    while (objects.filter(o => o instanceof Monster).length < MONSTER_COUNT) {
        const x = Math.floor(Math.random() * COLS);
        const y = Math.floor(Math.random() * ROWS);
        if (terrain[y][x] !== 1 && !(x === player.x && y === player.y)) {
            objects.push(new Monster(x, y));
        }
    }

    // –°—É–Ω–¥—É–∫–∏
    for (let i = 0; i < 3; i++) {
        const x = Math.floor(Math.random() * COLS);
        const y = Math.floor(Math.random() * ROWS);
        if (terrain[y][x] !== 1 && !(x === player.x && y === player.y)) {
            objects.push(new Chest(x, y));
        }
    }
}

generateObjects();

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞

function movePlayer(dx, dy) {
    const newX = player.x + dx;
    const newY = player.y + dy;

    if (newX >= 0 && newX < COLS && newY >= 0 && newY < ROWS) {
        if (terrain[newY][newX] !== 1) {
            player.x = newX;
            player.y = newY;

            // –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±—ä–µ–∫—Ç–æ–º
            const objIndex = objects.findIndex(o => o.x === newX && o.y === newY);
            const obj = objects[objIndex];
            if (obj instanceof Monster) {
                startBattle(obj, objIndex);
                return; // –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            }
        }
    }
}

document.addEventListener('keydown', (e) => {
    const key = e.key;
    if (key === 'ArrowUp') movePlayer(0, -1);
    else if (key === 'ArrowDown') movePlayer(0, 1);
    else if (key === 'ArrowLeft') movePlayer(-1, 0);
    else if (key === 'ArrowRight') movePlayer(1, 0);
});

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞

function drawGrid() {
    for (let y = 0; y < ROWS; y++) {
        for (let x = 0; x < COLS; x++) {
            const tile = terrain[y][x];
            const surface = SurfaceById[tile];
            ctx.fillStyle = surface.color;
            ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
            ctx.strokeStyle = '#333';
            ctx.strokeRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }
    }
}

function drawPlayer() {
    const cx = player.x * TILE_SIZE + TILE_SIZE / 2;
    const cy = player.y * TILE_SIZE + TILE_SIZE / 2;
    ctx.beginPath();
    ctx.arc(cx, cy, TILE_SIZE / 4, 0, 2 * Math.PI);
    ctx.fillStyle = 'red';
    ctx.fill();
    ctx.stroke();
}

function drawObjects() {
    for (const obj of objects) {
        obj.draw(ctx);
    }
}

function drawResources() {
    ctx.fillStyle = '#000';
    ctx.font = '20px Arial';
    let offset = 10;
    for (let symbol in resources) {
        ctx.fillText(`${symbol} ${resources[symbol]}`, offset, 25);
        offset += 70;
    }
}

function drawActions() {
    const container = document.getElementById('actions');
    container.innerHTML = '';

    const tile = terrain[player.y][player.x];
    const surface = SurfaceById[tile];
    const actions = surface.actions;

    if (!actions || actions.length === 0) {
        container.innerHTML = '<i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π</i>';
        return;
    }

    actions.forEach(action => {
        const btn = document.createElement('button');
        btn.textContent = formatActionLabel(action);
        btn.style.margin = '5px';
        btn.onclick = () => {
            if (canAfford(action.cost)) {
                applyAction(action);
                update();
            } else {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!');
            }
        };
        container.appendChild(btn);
    });
}

function formatActionLabel(action) {
    const cost = formatResources(action.cost);
    const gain = formatResources(action.gain);
    return `${action.label}${cost ? ' | üîª' + cost : ''}${gain ? ' | üî∫' + gain : ''}`;
}

function formatResources(res) {
    return Object.entries(res || {})
        .map(([key, val]) => `${key}${val}`)
        .join(' ');
}

function canAfford(cost) {
    for (let res in cost) {
        if ((resources[res] || 0) < cost[res]) return false;
    }
    return true;
}

function applyAction(action) {
    for (let res in action.cost) {
        resources[res] -= action.cost[res];
    }
    for (let res in action.gain) {
        resources[res] = (resources[res] || 0) + action.gain[res];
    }
}

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª

function update() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawGrid();
    drawObjects();
    drawPlayer();
    drawResources();
    drawActions();
    requestAnimationFrame(update);
}

update();

document.getElementById('spellbookButton').addEventListener('click', () => {
    const el = document.getElementById('spellbook');
    el.style.display = el.style.display === 'none' ? 'block' : 'none';
    drawSpellbook();
});

function drawSpellbook() {
    const el = document.getElementById('spellbook');
    el.innerHTML = '<h3>üìú –ì—Ä–∏–º—É–∞—Ä</h3>';

    CONFIG.SPELLS.forEach(spell => {
        const btn = document.createElement('button');
        btn.textContent = `${spell.name} (üí∞ ${formatResources(spell.cost)})`;
        btn.style.display = 'block';
        btn.style.margin = '4px 0';

        btn.onclick = () => {
            if (canAfford(spell.cost)) {
                applyCost(spell.cost);
                spell.effect();
                update(); // –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞
            } else {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!');
            }
        };

        el.appendChild(btn);
    });

    const closeBtn = document.createElement('button');
    closeBtn.textContent = '‚ùå –ó–∞–∫—Ä—ã—Ç—å';
    closeBtn.style.marginTop = '10px';
    closeBtn.onclick = () => {
        document.getElementById('spellbook').style.display = 'none';
    };
    el.appendChild(closeBtn);
}
function applyCost(cost) {
    for (let res in cost) {
        resources[res] -= cost[res];
    }
}
let currentMonster = null;
let monsterIndex = null;

function startBattle(monster, index) {
    currentMonster = monster;
    monsterIndex = index;

    document.getElementById('battle').style.display = 'block';
    updateMonsterStats();
    drawBattleSpells();
}
function updateMonsterStats() {
    const statEl = document.getElementById('monsterStats');
    statEl.textContent = Object.entries(currentMonster.hp)
        .map(([suit, val]) => `${suit}${val}`)
        .join(' ');
}
function drawBattleSpells() {
    const container = document.getElementById('spellOptions');
    container.innerHTML = '';

    CONFIG.SPELLS.forEach(spell => {
        const btn = document.createElement('button');
        btn.textContent = `${spell.name} (${formatResources(spell.cost)})`;
        btn.style.display = 'block';
        btn.style.margin = '4px 0';

        btn.onclick = () => {
            if (!canAfford(spell.cost)) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!');
                return;
            }

            applyCost(spell.cost);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            const damage = spell.damage || { '‚ô†': 1 }; // –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ SPELLS
            currentMonster.receiveDamage(damage);
            updateMonsterStats();

            if (!currentMonster.isAlive()) {
                alert('üéâ –ú–æ–Ω—Å—Ç—Ä –ø–æ–±–µ–∂–¥–µ–Ω!');
                objects.splice(monsterIndex, 1);
                closeBattle();
                update();
                return;
            }

            // –û—Ç–≤–µ—Ç –º–æ–Ω—Å—Ç—Ä–∞
            const dmg = currentMonster.randomAttack();
            alert('üëæ –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç!');
            for (let res in dmg) {
                resources[res] = Math.max(0, (resources[res] || 0) - dmg[res]);
            }
            update();
        };

        container.appendChild(btn);
    });
}
document.getElementById('fleeButton').onclick = () => {
    closeBattle();
};

function closeBattle() {
    document.getElementById('battle').style.display = 'none';
    currentMonster = null;
    monsterIndex = null;
}


